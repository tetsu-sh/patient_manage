 name: CI
 
 on: [push, pull_request]
 
 jobs:
  build_for_linux_and_operational_test:
    runs-on: ubuntu-20.04
    services:
      db:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: foo
          MYSQL_USER: user1
          MYSQL_PASSWORD: user1_password
          DB_NAME: medical
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Show Docker containers
        run: docker ps -a
      - name: Show databases for root user
        run: mysql --protocol=tcp -h localhost -P 3306 -u root -proot_password -e "SHOW DATABASES"
      - name: Show databases for user1
        run: mysql --protocol=tcp -h localhost -P 3306 -u user1 -puser1_password -e "SHOW DATABASES"
      - name: Crate database
        run: mysql --protocol=tcp -h localhost -P 3306 -u root -proot_password  -e 'CREATE DATABASE ${{env.DB_NAME}};'}
      - name: Create env file
        run: |
          touch .env
          echo "DATABASE_URL=mysql://root:${{env.MYSQL_ROOT_PASSWORD}}@localhost:3306/${{env.DB_NAME}}"
   
      - name: Build
        run: |
          set -eux
          docker run --rm -it -v "$(pwd)":/home/rust/src ekidd/rust-musl-builder:1.46.0 sh -c 'sudo chown -R rust:rust . && cargo build --release'
          sudo chown -R $USER:$USER .
      - name: Archive
        run: |
          set -eux
          mkdir patient-manage-x86-64-linux
          cp target/x86_64-unknown-linux-musl/release/patient-manage patient-manage-x86-64-linux
          zip -r patient-manage-x86-64-linux.zip patient-manage-x86-64-linux
          tar czf patient-manage-x86-64-linux.tar.gz patient-manage-x86-64-linux
      - name: Upload Linux executables as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.sha }}-linux-artifacts
          path: patient-manage-x86-64-linux.*
  build_for_mac:
    runs-on: macOS-10.15
    services:
      db:
        image: mysql:5.7
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: foo
          MYSQL_USER: user1
          MYSQL_PASSWORD: user1_password
          DB_NAME: medical
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: docker-practice/actions-setup-docker@master
      - run: set -x
      - name: Show Docker containers
        run: docker ps -a
      - name: Show databases for root user
        run: mysql --protocol=tcp -h localhost -P 3306 -u root -proot_password -e "SHOW DATABASES"
      - name: Show databases for user1
        run: mysql --protocol=tcp -h localhost -P 3306 -u user1 -puser1_password -e "SHOW DATABASES"
      - name: Crate database
        run: mysql --protocol=tcp -e 'CREATE DATABASE ${{env.DB_NAME}};' -u${{ env.MYSQL_USER }} -p${{ env.MYSQL_PASSWORD }}
      - name: Create env file
        run: |
          touch .env
          echo "DATABASE_URL=mysql://root:${{env.MYSQL_ROOT_PASSWORD}}@localhost:3306/${{env.DB_NAME}}"
      - run: cargo build --release
      - name: Archive
        run: |
          set -eux
          mkdir patient-manage-x86-64-apple-darwin
          cp target/release/patient-manage patient-manage-x86-64-apple-darwin
          zip -r patient-manage-x86-64-apple-darwin.zip patient-manage-x86-64-apple-darwin
          tar czf patient-manage-x86-64-apple-darwin.tar.gz patient-manage-x86-64-apple-darwin
      - name: Upload macOS executables as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ github.sha }}-mac-artifacts
          path: patient-manage-x86-64-apple-darwin.*
  
  release_if_tag_exits:
    needs: [build_for_linux_and_operational_test, build_for_mac]
    runs-on: ubuntu-20.04
    steps:
      - name: Extract tag name
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
        id: extract_tag
      - uses: actions/checkout@v2
      - name: Download the artifact (Linux)
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.sha }}-linux-artifacts
      - name: Download the artifact (macOS)
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.sha }}-mac-artifacts
      - name: Release
        if: contains(github.ref, 'refs/tags/')
        run: |
          set -eux
          hub release create \
            -a patient-manage-x86-64-linux.tar.gz \
            -a patient-manage-x86-64-linux.zip \
            -a patient-manage-x86-64-apple-darwin.tar.gz \
            -a patient-manage-x86-64-apple-darwin.zip \
            -m "Release ${{ steps.extract_tag.outputs.tag }}" ${{ steps.extract_tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}# Paste your workflow YAML to this code editor